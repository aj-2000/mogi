#ifndef RENDERER_H
#define RENDERER_H

// Required includes for types used in public structures and function signatures
#include "../external/glad/glad.h"     // For GLuint (used in FontData)
#include "../external/glfw/glfw3.h"     // For GLFWwindow* (used in Renderer)
#include "../external/stb/stb_truetype.h" // For stbtt_packedchar (used in FontData)

// Define standard integer types if not implicitly included
#include <stddef.h> // For size_t (often used implicitly, good to be explicit)

#ifdef __cplusplus
extern "C" {
#endif

// =============================================================================
// Basic Data Types
// =============================================================================

/**
 * @brief A 2D vector structure.
 */
typedef struct {
    float x;
    float y;
} Vec2;

/**
 * @brief Represents an RGBA color with components from 0.0f to 1.0f.
 */
typedef struct {
    float r;
    float g;
    float b;
    float a;
} ColorRGBA;

/**
 * @brief Represents a rectangle defined by its top-left position, width, and height.
 */
typedef struct {
    Vec2 position;
    float width;
    float height;
} Rect;

/**
 * @brief Represents a circle defined by its center position and radius.
 */
typedef struct {
    Vec2 position;
    float radius;
} Circle;

/**
 * @brief Represents a line segment defined by its start and end points.
 */
typedef struct {
    Vec2 start;
    Vec2 end;
} Line;


// =============================================================================
// Font Rendering Data
// =============================================================================

// Configuration for the font texture atlas generated by stb_truetype
#define FONT_ATLAS_WIDTH 512  ///< Width of the font texture atlas in pixels.
#define FONT_ATLAS_HEIGHT 512 ///< Height of the font texture atlas in pixels.
#define FONT_FIRST_CHAR 32    ///< First ASCII character code included in the atlas (space).
#define FONT_NUM_CHARS 95     ///< Number of consecutive characters included (ASCII 32-126).
#define M_PI 3.14159265358979323846 ///< Value of pi for circle calculations (if needed).

/**
 * @brief Holds data required for rendering text using a specific font.
 *        Includes the texture atlas, character metrics, and original TTF data.
 */
typedef struct FontData {
    unsigned char* ttf_buffer; ///< Pointer to the loaded TTF file data in memory.
    stbtt_packedchar char_data[FONT_NUM_CHARS]; ///< Packed character data from stb_truetype.
    GLuint texture_id;         ///< OpenGL texture ID for the font atlas.
    float font_height_pixels;  ///< The requested font height in pixels during loading.
    // Cached metrics for performance (calculated during load_font)
    float ascent;              ///< Font ascent in pixels (distance from baseline to top).
    float descent;             ///< Font descent in pixels (distance from baseline to bottom, usually negative).
    float line_gap;            ///< Spacing between lines in pixels.
} FontData;


// =============================================================================
// Renderer Context (Opaque-like, details needed for Go CGO)
// =============================================================================

/**
 * @brief Holds the internal state of the renderer, primarily the GLFW window.
 *        NOTE: Kept non-opaque for easier CGO interop in the user's Go code.
 *              Ideally, this would be an opaque pointer in a pure C library.
 */
typedef struct Renderer {
    GLFWwindow* window;         ///< Pointer to the underlying GLFW window.
    // Cached window size (updated by resize callback) for potential performance
    int current_width;          ///< Current framebuffer width in pixels.
    int current_height;         ///< Current framebuffer height in pixels.
} Renderer;


// =============================================================================
// Renderer Lifecycle & Window Management
// =============================================================================

/**
 * @brief Creates and initializes the renderer window and OpenGL context.
 * @param width Initial window width in screen coordinates.
 * @param height Initial window height in screen coordinates.
 * @param title The title of the window.
 * @return A pointer to the created Renderer context, or NULL on failure.
 *         The caller is responsible for calling destroy_renderer on the returned pointer.
 */
void* create_renderer(int width, int height, const char* title);

/**
 * @brief Destroys the renderer context, closes the window, and terminates GLFW.
 * @param renderer_ptr A pointer to the Renderer context created by create_renderer.
 */
void destroy_renderer(void* renderer_ptr);

/**
 * @brief Checks if the user has requested the window to close (e.g., by clicking the close button).
 * @param renderer_ptr A pointer to the Renderer context.
 * @return Non-zero if the window should close, 0 otherwise.
 */
int window_should_close(void* renderer_ptr);

/**
 * @brief Processes pending window events (input, resize, etc.). Should be called once per frame.
 * @param renderer_ptr A pointer to the Renderer context (technically optional for glfwPollEvents, but good practice).
 */
void handle_events(void* renderer_ptr);


// =============================================================================
// Core Rendering Control
// =============================================================================

/**
 * @brief Clears the entire screen (framebuffer) to the specified color.
 * @param renderer_ptr A pointer to the Renderer context.
 * @param color The background color to clear with.
 */
void clear_screen(void* renderer_ptr, ColorRGBA color);

/**
 * @brief Swaps the front and back buffers, displaying the rendered frame.
 * @param renderer_ptr A pointer to the Renderer context.
 */
void present_screen(void* renderer_ptr);

/**
 * @brief Enables or disables vertical synchronization (V-Sync).
 * @param renderer_ptr A pointer to the Renderer context.
 * @param vsync 1 to enable V-Sync, 0 to disable.
 */
void set_vsync(void* renderer_ptr, int vsync);


// =============================================================================
// 2D Shape Drawing Functions
// =============================================================================

// --- Rectangles ---
/**
 * @brief Draws the outline of a rectangle.
 * @param renderer_ptr Renderer context.
 * @param rect The rectangle's position and dimensions.
 * @param color The color of the outline.
 */
void draw_rectangle_outline(void* renderer_ptr, Rect rect, ColorRGBA color);

/**
 * @brief Draws a solid, filled rectangle.
 * @param renderer_ptr Renderer context.
 * @param rect The rectangle's position and dimensions.
 * @param color The fill color.
 */
void draw_rectangle_filled(void* renderer_ptr, Rect rect, ColorRGBA color);

/**
 * @brief Draws a filled rectangle with an outline.
 * @param renderer_ptr Renderer context.
 * @param rect The rectangle's position and dimensions.
 * @param fill_color The fill color.
 * @param outline_color The outline color.
 */
void draw_rectangle_filled_outline(void* renderer_ptr, Rect rect, ColorRGBA fill_color, ColorRGBA outline_color);


// --- Circles ---
/**
 * @brief Draws the outline of a circle.
 * @param renderer_ptr Renderer context.
 * @param circle The circle's center position and radius.
 * @param color The color of the outline.
 */
void draw_circle_outline(void* renderer_ptr, Circle circle, ColorRGBA color);

/**
 * @brief Draws a solid, filled circle.
 * @param renderer_ptr Renderer context.
 * @param circle The circle's center position and radius.
 * @param color The fill color.
 */
void draw_circle_filled(void* renderer_ptr, Circle circle, ColorRGBA color);

/**
 * @brief Draws a filled circle with an outline.
 * @param renderer_ptr Renderer context.
 * @param circle The circle's center position and radius.
 * @param fill_color The fill color.
 * @param outline_color The outline color.
 */
void draw_circle_filled_outline(void* renderer_ptr, Circle circle, ColorRGBA fill_color, ColorRGBA outline_color);


// --- Lines ---
/**
 * @brief Draws a line with a specified thickness.
 * @param renderer_ptr Renderer context.
 * @param line The line's start and end points.
 * @param color The line color.
 * @param thickness The thickness of the line in pixels.
 */
void draw_line_thick(void* renderer_ptr, Line line, ColorRGBA color, float thickness);

/**
 * @brief Draws a dashed line.
 * @param renderer_ptr Renderer context.
 * @param line The line's start and end points.
 * @param color The line color.
 * @param dash_length The length of each dash in pixels.
 * @param gap_length The length of each gap in pixels.
 */
void draw_line_dashed(void* renderer_ptr, Line line, ColorRGBA color, float dash_length, float gap_length);

/**
 * @brief Draws a dotted line composed of small filled circles.
 * @param renderer_ptr Renderer context.
 * @param line The line's start and end points.
 * @param color The dot color.
 * @param dot_radius The radius of each dot.
 * @param gap_factor Multiplier for the gap between dot centers (e.g., 1.0 = dots touch, 1.5 = gap is half a dot diameter).
 */
void draw_line_dotted(void* renderer_ptr, Line line, ColorRGBA color, float dot_radius, float gap_factor);


// =============================================================================
// Font Loading and Text Rendering
// =============================================================================

/**
 * @brief Loads a TrueType font (.ttf) file from the specified path.
 * @param font_path Path to the .ttf font file.
 * @param font_height_pixels Desired font height in pixels (determines atlas generation scale).
 * @return A pointer to the loaded FontData structure, or NULL on failure.
 *         The caller is responsible for calling destroy_font on the returned pointer.
 */
FontData* load_font(const char* font_path, float font_height_pixels);

/**
 * @brief Frees the resources associated with a loaded font (texture, buffers).
 * @param font_data Pointer to the FontData structure to destroy.
 */
void destroy_font(FontData* font_data);

/**
 * @brief Draws text on the screen using a loaded font.
 * @param renderer_ptr Renderer context.
 * @param font_data Pointer to the loaded FontData for the desired font.
 * @param text The null-terminated string to draw.
 * @param pos The top-left position where the text rendering should begin (baseline adjusted internally).
 * @param color The color of the text.
 */
void draw_text(void* renderer_ptr, FontData* font_data, const char* text, Vec2 pos, ColorRGBA color);

/**
 * @brief Calculates the horizontal width of a given string if rendered with the specified font.
 * @param font_data Pointer to the loaded FontData for the desired font.
 * @param text The null-terminated string to measure.
 * @return The calculated width in pixels.
 */
float calculate_text_width(FontData* font_data, const char* text);


// =============================================================================
// Utilities / Getters
// =============================================================================

/**
 * @brief Gets the time elapsed since the last frame, in seconds.
 * @param renderer_ptr Renderer context.
 * @return Delta time in seconds (float).
 */
float get_delta_time(void* renderer_ptr);

/**
 * @brief Gets the current size of the window's framebuffer.
 * @param renderer_ptr Renderer context.
 * @return A Vec2 structure containing the width (x) and height (y) in pixels.
 */
Vec2 get_window_size(void* renderer_ptr);


#ifdef __cplusplus
} // extern "C"
#endif

#endif // RENDERER_H
